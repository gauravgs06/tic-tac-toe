{"version":3,"sources":["components/Square.js","components/Board.js","index.js"],"names":["Square","props","cls","bgcolor","className","onClick","value","Board","row","col","line","this","square","squares","i","length","cols","map","renderSquare","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","calculateWinner","winner","setState","concat","update","$set","step","status","winnerDetail","moves","objValue","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6fc2b31.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Square(props) {\r\n  let cls = props.bgcolor ? \"square square-win\" : \"square\";\r\n  return (\r\n    <button className={cls} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component } from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nclass Board extends Component {\r\n  renderSquare(row, col) {\r\n    const line = this.props.line ? this.props.line : [];\r\n    let square = (\r\n      <Square\r\n        value={this.props.squares[row][col]}\r\n        onClick={() => this.props.onClick(row, col)}\r\n        bgcolor={false}\r\n      />\r\n    );\r\n    for (let i = 0; i < line.length; i++) {\r\n      if (row === this.props.line[i][0] && col === this.props.line[i][1]) {\r\n        square = (\r\n          <Square\r\n            value={this.props.squares[row][col]}\r\n            onClick={() => this.props.onClick(row, col)}\r\n            bgcolor={true}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return square;\r\n  }\r\n\r\n  render() {\r\n    const rows = [0, 1, 2];\r\n    const cols = [0, 1, 2];\r\n    const squares = rows.map(row => {\r\n      return (\r\n        <div className=\"board-row\">\r\n          {cols.map(col => {\r\n            return this.renderSquare(row, col);\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n    return <div>{squares}</div>;\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport update from \"immutability-helper\";\r\n\r\nimport \"./index.css\";\r\nimport Board from \"./components/Board\";\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          row: null,\r\n          col: null,\r\n          squares: Array(3).fill(Array(3).fill(null))\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true\r\n    };\r\n  }\r\n\r\n  handleClick(row, col) {\r\n    let history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares;\r\n    if (calculateWinner(squares).winner || squares[row][col]) {\r\n      return;\r\n    }\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          row: row,\r\n          col: col,\r\n          squares: update(squares, {\r\n            [row]: { [col]: { $set: this.state.xIsNext ? \"X\" : \"O\" } }\r\n          })\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0\r\n    });\r\n  }\r\n\r\n  handleWin(line) {}\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const squares = current.squares;\r\n\r\n    const winnerDetail = calculateWinner(squares);\r\n    const winner = winnerDetail.winner;\r\n    let status, line;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n      line = winnerDetail.line;\r\n    } else {\r\n      status = \"Next Player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n      line = null;\r\n    }\r\n\r\n    const moves = history.map((objValue, move) => {\r\n      let desc = move\r\n        ? \"Go to move #\" +\r\n          move +\r\n          \" (\" +\r\n          history[move].col +\r\n          \", \" +\r\n          history[move].row +\r\n          \")\"\r\n        : \"Go to game start\";\r\n      if (move === this.state.stepNumber) {\r\n        desc = <b>{desc}</b>;\r\n      }\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={squares}\r\n            onClick={(row, col) => this.handleClick(row, col)}\r\n            line={line}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [[0, 0], [0, 1], [0, 2]],\r\n    [[1, 0], [1, 1], [1, 2]],\r\n    [[2, 0], [2, 1], [2, 2]],\r\n    [[0, 0], [1, 0], [2, 0]],\r\n    [[0, 1], [1, 1], [2, 1]],\r\n    [[0, 2], [1, 2], [2, 2]],\r\n    [[0, 0], [1, 1], [2, 2]],\r\n    [[0, 2], [1, 1], [2, 0]]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (\r\n      squares[a[0]][a[1]] &&\r\n      squares[a[0]][a[1]] === squares[b[0]][b[1]] &&\r\n      squares[a[0]][a[1]] === squares[c[0]][c[1]]\r\n    ) {\r\n      return { winner: squares[a[0]][a[1]], line: lines[i] };\r\n    }\r\n  }\r\n  return { winner: null, line: null };\r\n}\r\n"],"sourceRoot":""}